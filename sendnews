#!/usr/bin/php
<?php

/* vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4: */

/**
 * sendNews : Envoi d'une lettre d'information
 *
 * PHP versions 5
 *
 * LICENSE: Ce programme est un logiciel libre distribue sous licence GNU/GPL
 *
 * @author     Yves Tannier <yvestan SANSPAM gmail.com>
 * @copyright  2009  Yves Tannier
 * @license    http://www.gnu.org/copyleft/lesser.html  LGPL License 2.1
 * @version    0.7.1
 * @link       http://www.grafactory.net
 */

require dirname(__FILE__).'/conf/config.inc.php';

// on supprime la limite d'execution d'un script php
set_time_limit(0);

// erreur
error_reporting(-1);

// aide contextuelle
$help_string = "Parametres :
                -c= : fichier de configuration à utiliser (à mettre dans le repertoire conf)
                -e  : lancer l'envoi de la lettre d'information
                -S= : sujet du message
                -f= : fichier HTML qui compose le message
                -l= : nombre maximum de messages à envoyer
                -n  : n'envoie pas les messages mais modifie le champ envoye (test seulement)
                -N  : ne modifie pas le champ envoye (test seulement)
                -q  : retourne le nombre de destinataires (non envoye)
                -r  : remettre le flag 'envoye' des utilisateurs a zero
                -s  : mode silencieux (envoi seulement un message de debut et de fin de traitement)
                -o  : loguer dans le fichier precise dans la configuration 
                -L= : numéro de la liste (fonctionnalite pour PHPList)
                -t  : tester uniquement (envoi un message de test ou montre seulement les bounces sans les marquer et les supprimer)
                -u= : email de l'utilisateur de test
                -h, --help : afficher cette aide...";

/**
 * classe utilitaires
 */
require SENDNEWS_PATH.'/libs/class.utils.php';
$utils = new Sendnews_Utils();

// recuperer les parametres passe en CLI
foreach($_SERVER['argv'] as $param) {
    // pour le fichier de configuration
    if(strpos($param,'c=')) {
        $utils->config_name = str_replace('-c=','',$param);
        $configfile = $utils->config_name.'.php';
        continue;
    }
    // pour le fichier html passe en parametre
    if(strpos($param,'f=')) {
        $defaut_file = trim(str_replace('-f=','',$param));
        continue;
    }
    // pour le numéro de la liste (fonctionnalités PHPList)
    if(strpos($param,'L=')) {
        $num_list = str_replace('-L=','',$param);
        continue;
    }
    // pour le sujet du message
    if(strpos($param,'S=')) {
        $subject_msg = str_replace('-S=','',$param);
        $subject_msg = str_replace('\'','',$subject_msg);
        continue;
    }  
    // pour le lien "text-only" TODO
    if(strpos($param,'T=')) {
        continue;
    }
    // pour le nombre d'envoi
    if(strpos($param,'l=')) {
        $limit= (int)(str_replace('-l=','',$param));
        if ($limit < 1) $limit=1;
        continue;
    }
    // pour l'email de test
    if(strpos($param,'u=')) {
        $email_test = str_replace('-u=','',$param);
        continue;
    }
    switch($param) {
      case '-s' :
        $silent = true;
        break;
      case '-e' :
        $execute = true;
        break;
      case '-r' :
        $renew = true;
        break;
      case '-t' :
        $testsend = true;
        break;
      case '-n':
        $nosend = true;
        break;
      case '-N':
        $noupdate = true;
        break;
      case '-o' :
        $log_in_file = true;
        break;
      case '-b' :
        $bounce = true;
        break;
      case '-q' :
        $query = true;
        break;
      case '-h' :
      case '--help' :
        $utils->display($help_string); // afficher l'aide
        exit();
      case $_SERVER['SCRIPT_NAME'] :
        unset ($_SERVER['argv'][0]);
        break;
      default :
        $utils->display('Parametre inconnu : '.$param);
        exit();
    }
}

// pas d'argument
if (empty($_SERVER['argv'])) {
    $utils->display('Veuillez preciser au moins un parametre !');
    $utils->display($help_string);
    exit();
}

// pas de fichier de configuration
if(empty($configfile)) {
    $utils->display('Vous n\'avez pas precise de fichier de configuration !');
    exit();
}

// fichier de configuration introuvable
if(empty($configfile) || !file_exists(SENDNEWS_PATH.'/conf/'.$configfile)) {
    $utils->display('Le fichier de configuration '.$configfile.' n\'existe pas !');
    exit();
}

/**
 * inclure le fichier de configuration
 */
include SENDNEWS_PATH.'/conf/'.$configfile;

// on teste si le fichier de log existe et s'il n'existe pas, on affiche sur la sortie standard
$log_file = null;

// debug => recevoir une copie en Bcc tous les X messages
$copy_send = false; // actif ou pas
$copy_send_mail = 'votre@email'; // email de destination
$copy_send_nb = 5000; // envoyer tous les x message
$copy_send_count = 0; //init

if(!empty($log_in_file)) {
    // essayer de créer le fichier de log
    if(defined('LOG_FILE')) {
        if(!file_exists(LOG_FILE)) {
            if(!touch(LOG_FILE)) {
                $utils->display('LOG_FILE sur la sortie standard. Impossible d\'acceder au fichier de log !', $log_file);
            } else {
                $log_file = LOG_FILE;
            }
        } else {
            $log_file = LOG_FILE;
        }
    } else {
        $utils->display('LOG_FILE sur la sortie standard. Impossible d\'acceder au fichier de log !', $log_file);
    }
}

// le sujet
if(!empty($subject_msg)) {
    $subject = $subject_msg;
} else {
    if(empty($subject)) {
        $utils->display('Il n\'y a pas de sujet pour ce message !', $log_file);
        exit();
    }
}
$subject = utf8_decode($subject);

// test
if(!empty($testsend)) {
    $subject = '[test] '.$subject;
}

//php 5.2.6-1+lenny9 => bug avec rowCount
$php_bug = true;

// si pas de variable (compatibilité)
if(!defined('TEMPLATE_MSG')) {
    define('TEMPLATE_MSG',false);
}

// Acces BDD
try {
    $db = new PDO(DB_TYPE.':host='.DB_HOST.';dbname='.DB_NAME, DB_USER, DB_PASS);
} catch (PDOException $e) {
    die('Connexion error : ' . $e->getMessage() );
}

/**
 * librairie pour le mail
 */
$swiftdir = SENDNEWS_PATH.'/swiftmailer/lib/';
require $swiftdir.'swift_required.php';

// envoi
if (empty($renew) && !empty($execute)) {

    // si on a precise un fichier HTML en paramètre
    if(!empty($defaut_file)) {
        $utils->file_name = $defaut_file;
    } else {
        if (is_dir(DIR_HTML)) {
            // parcours du répertoire pour obtenir le dernier fichier place
            $dir = scandir(DIR_HTML);
            $files = array();
            foreach ($dir as $file) {
                if(is_file(DIR_HTML.$file)) {
                    if (!preg_match('/^\./', $file)) {
                       $files['name'][0] = $file;
                       $files['date'][0] = filemtime(DIR_HTML.$file);
                    }
                }
            }
            $defaut_file = $files['name'][0];
        }
        // on recupere le nom du fichier HTML
        fwrite(STDOUT, 'Entrez le nom precis du fichier html (defaut : '.$defaut_file.') : ');
        $utils->file_name = trim(fgets(STDIN));

    } // fin test fichier

    $utils->display('Envoi du message avec le fichier HTML '.$utils->file_name, $log_file);

    if (strpos($utils->file_name, DIRECTORY_SEPARATOR) === 0 && file_exists($utils->file_name)) {
        $file = $utils->file_name;
    } else {
        $file = DIR_HTML.$utils->file_name;
    }

    // le mail en HTML depuis la page stockee sur le serveur
    $msg_html = @file_get_contents($file);
    if ($msg_html === false) {
        $utils->display('ECHEC : Le fichier HTML du message n\'a pas ete trouve ou n\'a pas pu etre ouvert', $log_file);
        $utils->display('Fichier = '.$file, $log_file);
        exit();
    }

    // on essaye de récupérer le même fichier mais en txt
    $file_text = $file.'.txt';
    $msg_textfile = @file_get_contents($file_text);
    if ($msg_textfile !== false && !empty($msg_textfile)) {
        $msg_text = $msg_textfile;
        $file_txt = true;
    } else {
        $file_txt = false;
    }

    // instancie l'objet et la connexion via sendmail ou via mail()
    // ou precise dans le fichier de configuration
    if(TYPE_SENDING=='SendMail') {
        $transport = Swift_SendmailTransport::newInstance();
    } elseif(TYPE_SENDING=='Other' && file_exists(SENDNEWS_PATH.'/conf/sending.php')) {
        include SENDNEWS_PATH.'/conf/sending.php';
    } else {
        $transport = Swift_MailTransport::newInstance();
    }

    // on précise le serveur de mail
    /*if(!defined(SERVER_MAIL)) {
        $transport->setDomain(SERVER_MAIL);
    }*/

    $mailer = Swift_Mailer::newInstance($transport);

    // UTF-8 ou ISO
    Swift_Preferences::getInstance()->setCharset('iso-8859-1');

    // défini le nombre de mail par lot et le temps de pause
    $mailer->registerPlugin(new Swift_Plugins_AntiFloodPlugin($per_send, $pause_time));
 
    // composition du message
    $message = Swift_Message::newInstance()
        ->setFrom(array(SENDER => SENDER_NAME)) // expediteur
        ->setSubject($subject) // sujet
        ->setReturnPath(SENDER_RETURN); // adresse de retour

    // si pas de message avec template
    if(!TEMPLATE_MSG || !empty($testsend)) {

        // message en HTML
        $message->addPart($msg_html, 'text/html');

        // ajouter le file_name à la fin de la version txt si pas de version txt en fichier
        if(!$file_txt) {
            $message->addPart($msg_text.$utils->file_name, 'text/plain');
        } else {
            $message->addPart($msg_text, 'text/plain');
        }

    }

    // si ce n'est pas un test
    if (empty($testsend)) {
        
        // afaire : tester la taille de la file d'attente
        // et régler le débit en fonction

        // requete sur la table des utilisateurs
        $sql = $queries['select'];
        if (isset($limit)) {
            $sql .= ' LIMIT '.$limit;
        }
        $res = $db->query($sql);

        // nombre de destinataires
        if($php_bug) {
            $rows_total = $res->fetchAll();
            $num_dest = count($rows_total);
        } else {
            $num_dest = $res->rowCount();
        }

        if($num_dest>0) {
            $utils->display('Envoi du message a '.$num_dest.' utilisateurs presents dans la table '.USERS, $log_file);
            if (isset($limit)) {
                $utils->display('** Limite active : '.$limit, $log_file);
            }
        } else {
            $utils->display('Il n\'y a aucun destinataire pour le message', $log_file);
            $utils->display('Avez-vous re-initialise le flag d\'envoi ?', $log_file);
            exit;
        }
        if (!empty($nosend)) {
            $utils->display('** Pas d\'envoi reel du message (option -n)', $log_file);
        }
        if (!empty($noupdate)) {
            $utils->display('** Pas de mise a jour du champ envoye (option -N)', $log_file);
        }

        // retour en plus
        $utils->display('', $log_file);

        // initialisation
        $i = 0;
        $idvalue = null;
        $count_success = 0;

        if (!empty($queries['update'])) {
            // statement pour l'update
            $sta = $db->prepare($queries['update']);
            $sta->bindParam(1, $idvalue);
        }

        // début 
        $time_start = microtime(true);

        // fichier d'arrêt
        $stop_file = PID_PATH.$utils->file_name.'.stop';

        // fichier qui indique que le script est en cours
        $running_file = PID_PATH.$utils->file_name.'.running';

        //  boucle
        //while($row = $res->fetch()) {
        foreach($rows_total as $row) {

            // si la limite est dépassée, on stop
            if (isset($limit) && $i >= $limit) {
                break;
            }

            // demande d'arret du script
            if(file_exists($stop_file)) {
                $utils->display('/!\ Arret demandé ', $log_file);
                unlink($stop_file);
                exit;
            }

            $email = $row[EMAIL_USERS];
            $email = strtolower($email);
            
            // on verifie la validite syntaxique de l'adresse mail
            if (!$utils->isEmailSyntaxValid($email)) {
                if(empty($silent)) {
                    $utils->display('-> Adresse '.$row[EMAIL_USERS].' '.$row[ID_USERS].' non valide', $log_file);
                }
                // TODO : marquer l'email invalide dans la base ou dans un fichier de logs
                continue;
            }

            // init la variable
            $success = false;
            
            // on envoie effectivement le message (sauf si option nosend)
            if (empty($nosend)) {

                // faut-il un message personnalisé ?
                if(TEMPLATE_MSG) {

                    // composition d'un nouveau message
                    $message = Swift_Message::newInstance()
                        ->setFrom(array(SENDER => SENDER_NAME)) // expediteur
                        ->setSubject($subject) // sujet
                        ->setReturnPath(SENDER_RETURN); // adresse de retour

                    // text ou lien vers HTML
                    if($file_text) {
                        $msg_text_template = $utils->setTemplateMsg($msg_text,$row);
                        $message->addPart($msg_text_template, 'text/plain');
                    } else {
                        $message->addPart($msg_text_template, 'text/plain');
                    }

                    // html
                    $msg_html_template = $utils->setTemplateMsg($msg_html,$row);
                    $message->addPart($msg_html_template, 'text/html');

                }

                // ajoute le destinataire
                $message->setTo($email);

                // recevoir une copie tous les X messages
                if(!empty($copy_send)) {
                    $copy_send_count++;
                    if($copy_send_count % $copy_send_nb == 0) {
                        $utils->display('-> COPY Envoi', $log_file);
                        $message->setBcc($copy_send_mail);
                    }
                }

                // envoi le message
                $success = $mailer->send($message);

                // on comptabilise les succes
                if ($success) $count_success++;

            }

            if (empty($noupdate) && !empty($queries['update']) && (!empty($success) || !empty($nosend))) {
                // on met a jour le flag "envoye"
                $idvalue = $row[ID_USERS];
                $sta->execute();
            }

            $utils->display('-> Envoi en cours a '.$email.' '.$row[ID_USERS], $log_file);

            $i++;
        }

        // fin
        $time_end = microtime(true);

        // temps d'execution
        $time_exec = $time_end - $time_start;
        
        // fin de l'envoi
        $utils->display('=======> Envoi termine en '.$utils->getTimeExec($time_start,$time_end).' ('.$count_success.'/'.$i.') !', $log_file);

    }

    // sinon on test l'envoi
    else {

        // on a pas précisé un email de test
        if(empty($email_test)) {
            fwrite(STDOUT, 'Entrez l\'adresse de test (par defaut : '.$defaut_send.') : ');
            $defaut_name = trim(fgets(STDIN));
        } else {
            $defaut_name = trim($email_test);
        }

        if (!empty($defaut_name)) {
            $defaut_send = $defaut_name;
        }

        // test de l'email
        if(!filter_var($defaut_send, FILTER_VALIDATE_EMAIL)) {
            $utils->display('ECHEC : l\'email de test n\'est pas corrrect', $log_file);
            exit;
        }

        // envoi du message de test
        
        if($message->setTo($defaut_send) && $mailer->send($message)) {
            $utils->display('=======> Le message de test a bien ete envoye a '.$defaut_send, $log_file);
            exit;
        } else {
            $utils->display('ECHEC : Il y a eu un probleme pendant l\'envoi du message de test', $log_file);
            exit;
        }
        
    }


}

// on remet le flag d'envoi a 0
if(!empty($renew) && !empty($queries['renew'])) {
    
    $utils->display('Remise a zero du flag d\'envoi');
    
    $utils->display('Etes-vous sur ? (O/N) : ');
    $confirm = trim(fgets(STDIN));

    if (strtolower($confirm) == 'o') {
        $num_dest = $db->exec($queries['renew']);
        $utils->display('=======> Le flag d\'envoi de '.$num_dest.' utilisateurs a bien ete reinitialise');
    }
}

// on compte le nombre des destinataires
if (!empty($query)) {

    $sql = $queries['select'];
    if (isset($limit)) {
        $sql .= ' LIMIT '.$limit;
    }

    $res = $db->query($sql);

    // nombre de destinataires
    if($php_bug) {
        $rows_total = $res->fetchAll();
        $num_dest = count($rows_total);
    } else {
        $num_dest = $res->rowCount();
    }
    
    $utils->display($num_dest.' destinataires');

}
?>
